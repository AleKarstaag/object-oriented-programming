#!/usr/bin/env python
import os
import github  # Install pygithub
import git     # Install gitpython
from argparse import ArgumentParser
import subprocess
import sys

parser = ArgumentParser(
    description="""Helper script to mark finite element assignments.""")
parser.add_argument(
    "--update", action="store_true", help="Update all student repositories.")
parser.add_argument(
    "--push-midterm", action="store_true",
    help="Push the midterm branch of all student repos to the marking repo.")
parser.add_argument("--checkout", type=str, action="store", metavar=("REPO"),
                    help="checkout finite-element/fe-%d-REPO." % 0)
parser.add_argument("--test", action="store_true", help="Execute tests")
parser.add_argument("-x", action="store_true", help="Stop on first test fail")
parser.add_argument("--week", type=str, action="store", required=True,
                    help="Week whose repositories should be cloned.")
parser.add_argument("--midterm", action="store_true",
                    help="Retrieve midterm submissions.")
args = parser.parse_args()

repo = git.Repo(".")

if args.update or args.midterm:
    g = github.Github(os.environ["GITHUB_OAUTH"])
    org = g.get_organization("Imperial-MATH50009")
    count = 0

    if args.midterm:
        reponame = "midterm-test-cards"
        name_offset = len(reponame) + 1
    else:
        reponame = "exercises-week-%s" % args.week
        name_offset = 10

    for r in org.get_repos():
        if r.name.startswith(reponame):
            count += 1
            uname = r.name[name_offset:]
            print("Looking for remote %s" % uname)
            try:
                remote = repo.remote(uname)
                print("Found")
            except ValueError:
                print("Not found. Creating")
                remote = repo.create_remote(uname, r.ssh_url)
            print("Fetching")
            remote.fetch()
    print(f"{count} repos found.")

if args.push_midterm:
    g = github.Github(os.environ["GITHUB_OAUTH"])
    org = g.get_organization("Imperial-MATH50009")

    remote = repo.remote("midterm-marking")
    marking_repo = org.get_repo("midterm-marking")
    marking_repos = {pull.title for pull in marking_repo.get_pulls()}


    for r in org.get_repos():
        if r.name.startswith("midterm-test-cards"):
            uname = r.name[19:]
            print("Pushing main for remote %s" % uname)
            remote.push("remotes/{0}/main:refs/heads/{0}-main".format(uname))
            print("Pushing feedback for remote %s" % uname)
            remote.push("remotes/{0}/feedback:refs/heads/{0}-feedback".format(uname))
            if uname not in marking_repos:
                print("Creating pull request for %s" % uname)
                marking_repo.create_pull(title=uname,
                                         body="Midterm marking.",
                                         base=f"{uname}-feedback",
                                         head=f"{uname}-main",
                                         draft=False)

if args.checkout:
    user = args.checkout
    print("Checking out head for %s" % user)
    head = repo.create_head(user, commit="/%s/implementation" % user)
    repo.head.reference = head
    repo.head.reset(working_tree=True)
    print("success")

if args.test:
    os.environ["PYTHONPATH"] = repo.working_tree_dir
    test_args = ["-x"] if args.x else []
    try:
        subprocess.check_output(["py.test"] + test_args)
    except subprocess.CalledProcessError as e:
        sys.stdout.write(e.output.decode("utf8"))
